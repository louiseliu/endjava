var RootPath = '';
var fs = require('fs');
var S = require('string');

module.exports.setRoot = function(p)//检查根目录路径是否最后加'/'
{
	RootPath = p;
	if (!RootPath.match(/\/$/)) RootPath+='/';
};

module.exports.create = function(f)
{
	return new EndSkin(f);
};

exports.cache = {};

function EndSkin(tmpId)
{
	if (!tmpId)
	{
		throw new Error('EndSkin: no template name passed');
		return;
	}
	var codeBlocks = [];
	
	this.templateReader = function(f,cb)
	{
		var file = RootPath+f;
		var fileMatch = file.match(/views\/(.*?)\w/i);
		file = file.replace(fileMatch[1],'');
		return fs.readFileSync(file,'utf-8');
	} 
	
	//get the role that developer has set in setRoleConfig.txt
	this.getRole = function(){
		var file = RootPath + 'WEB-INF/jsp/portal/role/setRoleConfig.txt';
		var fileMatch = file.match(/views\/(.*?)\w/i);
		file = file.replace(fileMatch[1],'');
		return fs.readFileSync(file,'utf-8');
	}
	
	this.getTemplateString = function(id)
	{
		var s = this.templateReader(id);
		var smatch;
		var role = this.getRole();//choice of role:guset,teacher,user
		if (!s)
		{
			throw new Error('EndSkin: template "'+id+'" not found');
			return;
		}
		//TRIP.log(id);
		//TRIP.log(s);
		
		//we should remove remark before replace include files
		//remove remark,two kinds of remarks START
		if(smatch = s.match(/\<\%\-\-(.|\r|\n)*?\-\-\%\>/ig)){
			for(i=0; m=smatch[i]; i++)
			{
				s = s.replace(m, '');
			}
		}
		if(smatch = s.match(/\<\!\-\-(.|\r|\n)*?\-\-\>/ig)){
			for(i=0; m=smatch[i]; i++)
			{
				s = s.replace(m, '');
			}
		}
		//remove remark,two kinds of remarks END
		
		//remove DOMs in unexpected shiro tags START
		if(role == 'guest'){//role is guest
			if(smatch = s.match(/\<shiro:hasAnyRoles.*\>(.|\r|\n)*?\<\/shiro:hasAnyRoles\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
			if(smatch = s.match(/\<shiro:hasRole.*\>(.|\r|\n)*?\<\/shiro:hasRole\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
			if(smatch = s.match(/\<shiro:guest.*\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
			if(smatch = s.match(/\<\/shiro:guest\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
		}
		if(role == 'user' || role == 'teacher'){//role is teacher OR role is user but not teacher
			if(smatch = s.match(/\<shiro:guest.*\>(.|\r|\n)*?\<\/shiro:guest\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
			if(smatch = s.match(/\<shiro.*\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, '');
				}
			}
			if(smatch = s.match(/\<\/shiro.*\>/ig)){
				for(i=0; m=smatch[i]; i++)
				{
					s = s.replace(m, ''); 
				}
			}
		}
		//remove DOMs in unexpected shiro tags END
		
		var ms = s.match(/<%@.*?include.*file=\"(.*?)\".*?%>/gi);
		if (ms){
			 for(var i=0,m;m=ms[i]; i++)
				{
					var _ms = m.match(/<%@.*?include.*file=\"(.*?)\".*?%>/i);
					s = s.replace(m,this.getTemplateString(_ms[1]));
				}
		}
		
		return s;
	}
	
	this.data = {};
	
	this.assign = function(key,val)
	{
		if (key && val) this.data[key] = val;
		else if (typeof key == 'object')
			for(var k in key)
				this.data[k] = key[k];
		return this;
	}
	
	
	this.compile = function(page)
	{
		var ms = null,i=0,m;
		
		//remove java tag
		if(ms = page.match(/\<\%\@.*\%\>/ig)){
			for(i=0; m=ms[i]; i++)
			{
				page = page.replace(m, '');
			}
		}
		
		var cSetBegins = 0;
		if (ms = page.match(/\<c\:set.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\<c\:set.*?var=\"(.*?)\".*?value=\"(\$\{.*?\}.*?)\"\>/i);//if value of cset is variable like 'value="${num}"' or like 'value="${num}/123456"'
				if (_ms)
				{	
					var value = _ms[2];
					var variable = '${'+_ms[1]+'}';
					page = S(page).replaceAll(variable,value).s;
					cSetBegins++;
				}
				
				var _ms = m.match(/\<c\:set.*?var=\"(.*?)\".*?value=\"(.*?)\".*?\>/i);//if value of cset is constant like 'value="123"'
				if (_ms)
				{
					var value = _ms[2];
					var variable = '${'+_ms[1]+'}';
					page = S(page).replaceAll(variable,value).s;
					cSetBegins++;
				}
				
				page = page.replace(m,'');
			}
		}
		
		var cSetEnds = 0;
		if (ms = page.match(/\<\/c\:set.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				page = page.replace(m,'');
				cSetEnds++;
			}
		}
		
		var foreachBegins = 0;
		if (ms = page.match(/\<c\:forEach.*?\>/ig))//do not support varStatus attribute
		{	
			for(i=0; m=ms[i]; i++)
			{
//				console.log("m:" + m);
				var onlyBeginAndEnd = true;//flag that decides if only begin and end attributes in foreach tag
				var _ms = m.match(/\<c\:forEach.*?\$\{(.*)\}.*?var=\"(.*?)\"(.*?)\>/i);//compile foreach：var is behind items,include begin and end attributes 
				if (_ms)
				{
					var variable = this._replace_var_name_jsp(_ms[1]);
					var item = _ms[2];
					var option = _ms[3];
					var beginAndEnd = option.match(/.*?begin.*?end.*?/i);
					if(beginAndEnd){
						var beiginNum = option.match(/begin="(\d+)"/i)[1];
						var endNum = option.match(/end="(\d+)"/i)[1];
						var code = '(function()\n{\nvar __var = '+variable+';\nfor(var __key in __var)\n{\nif(__key >= '+beiginNum+' && __key <= '+endNum+')\n{\nthis.data[\"'+item+'\"] = __var[__key];\n';
					}else{
						var code = '(function()\n{\nvar __var = '+variable+';\nfor(var __key in __var)\n{\nif(true)\n{\nthis.data[\"'+item+'\"] = __var[__key]; \n'; 
					}
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					onlyBeginAndEnd = false;
				}
				
				var _ms = m.match(/\<c\:forEach.*?var=\"(.*?)\".*?\$\{(.*)\}\"(.*?)\>/i);//compile foreach：items is behind var,include begin and end attributes
				if (_ms)
				{
					var variable = this._replace_var_name_jsp(_ms[2]);
					var item = _ms[1];
					var option = _ms[3];
					var beginAndEnd = option.match(/.*?begin.*?end.*?/i);
					if(beginAndEnd){
						var beiginNum = option.match(/begin="(\d+)"/i)[1];
						var endNum = option.match(/end="(\d+)"/i)[1];
						var code = '(function()\n{\nvar __var = '+variable+';\nfor(var __key in __var)\n{\nif(__key >= '+beiginNum+' && __key <= '+endNum+')\n{\nthis.data[\"'+item+'\"] = __var[__key];\n';
					}else{
						var code = '(function()\n{\nvar __var = '+variable+';\nfor(var __key in __var)\n{\nif(true)\n{\nthis.data[\"'+item+'\"] = __var[__key]; \n'; 
					}
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					onlyBeginAndEnd = false;
				}
				
				if(onlyBeginAndEnd){//compile foreach：there is no items and var,just begin and end attributes
					var _ms = m.match(/\<c\:forEach.*?begin="(\d+)".*?end="(\d+)".*?\>/i);
					if(_ms){
						var beginNum = _ms[1];
						var endNum = _ms[2];
						var code = '(function()\n{\nfor(var i = '+beginNum+';i<='+endNum+';i++)\n{\nif(true)\n{\n';
						codeBlocks.push(code);
						page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					}
				}
				
				foreachBegins++;
			}
		}
		
		var foreachEnds = 0;
		if (ms = page.match(/\<\/c:forEach>/ig))
		{
//			console.log(ms);
			for(i=0; m=ms[i]; i++)
			{
				var code = '}\n}\n}).call(this);\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				foreachEnds++;
			}
		}
		
		var ifBegins = 0;//support complex expression
		if (ms = page.match(/\<c\:if.*?\"\s*\>/ig))//types:1 x>2;2 y > x;3 x;4 x==='test',support || or && like "a > 1 && b <10"
		{
			console.log(ms);
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\<c\:if.*?test=\"\$\{(.*?)\}.*?\>/i);
				if (_ms)
				{
					var code = 'if (';
					var _msMatch = _ms[1].match(/\s*(\w*)\s*(>=|<=|===|==|<|>|!==|!=)?\s*(\'.*\'|\w*)?\s*(&&|\|\|)?(.*)/i); 
					while(_msMatch){//recursive process that compiles if-expression to js code
						var variable = this._replace_var_name_jsp(_msMatch[1]);
						if(_msMatch[2]){
							var cond = _msMatch[2] + _msMatch[3];
							code = code + variable + cond;
						}else{
							code = code + variable;
						}
						
						if(_msMatch[4]){
							code = code + _msMatch[4];
							_msMatch = _msMatch[5].match(/\s*(\w*)\s*(>=|<=|===|==|<|>|!==|!=)?\s*(\'.*\'|\w*)?\s*(&&|\|\|)?(.*)/i);
						}else{
							_msMatch = '';
						}
					}
					
					code = code + ')\n{\n';
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					ifBegins++;
				}
			}
		}
		
		var ifEnds = 0;
		if (ms = page.match(/\<\/c\:if>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '}\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				ifEnds++;
			}
		}
		
		var cwhenBegins = 0;//support complex expression 
		if (ms = page.match(/\<c\:when.*\"\s*>/ig))//types:1 x>2;2 y > x;3 x;4 x==='test',support || or && like "a > 1 && b <10"
		{
//			console.log(ms);
			for(i=0; m=ms[i]; i++)
			{	
				var _ms = m.match(/\<c\:when.*?test=\"\$\{(.*?)\}.*?\>/i);
				if (_ms)
				{
					var code = 'case (';
					var _msMatch = _ms[1].match(/\s*(\w*)\s*(>=|<=|===|==|<|>|!==|!=)?\s*(\'.*\'|\w*)?\s*(&&|\|\|)?(.*)/i); 
					while(_msMatch){//recursive process that compiles when-expression to js code
						var variable = this._replace_var_name_jsp(_msMatch[1]);
						if(_msMatch[2]){
							var cond = _msMatch[2] + _msMatch[3];
							code = code + variable + cond;
						}else{
							code = code + variable;
						}
						
						if(_msMatch[4]){
							code = code + _msMatch[4];
							_msMatch = _msMatch[5].match(/\s*(\w*)\s*(>=|<=|===|==|<|>|!==|!=)?\s*(\'.*\'|\w*)?\s*(&&|\|\|)?(.*)/i);
						}else{
							_msMatch = '';
						}
					}
					
					code = code + '):';
//					console.log(code);
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					cwhenBegins++;
				}
				
			}
		}
		
		var cWhenEnds = 0;
		if (ms = page.match(/\<\/c\:when>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '\nbreak;\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cWhenEnds++;
			}
		}
		
		var cOthersBegins = 0;
		if (ms = page.match(/\<c\:otherwise\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '\ndefault :\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cOthersBegins++;
			}
		}
		
		var cOthersEnds = 0;
		if (ms = page.match(/\<\/c\:otherwise\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '\nbreak;';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cOthersEnds++;
			}
		}
		
		var cChooseBegins = 0;
		if(ms = page.match(/\<c\:choose>/ig)){
			for(i=0; m=ms[i]; i++){
				code = '\nswitch (true) {\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cChooseBegins++;
			}
		}
		
		var cChooseEnds = 0;
		if(ms = page.match(/\<\/c\:choose>/ig)){
			for(i=0; m=ms[i]; i++){
				code = '\n}\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cChooseEnds++;
			}
		}
		
		
		if (ms = page.match(/\$\{([a-zA-Z\_][a-zA-Z0-9\_\.\[\]\'\"]*)\}/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\$\{([a-zA-Z\_][a-zA-Z0-9\_\.\[\]\'\"]*)\}/i);
				var code = 'output.push('+this._replace_var_name_jsp(_ms[1])+');';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
			}
		}
		
		var arr = page.split(/\{\{\{\{EndSkin\.codeblock\[\d+\]\}\}\}\}/);
		var ms = page.match(/\{\{\{\{EndSkin\.codeblock\[(\d+)\]\}\}\}\}/g);

		var codes = ['var output = [];'];
		for(i=0;i<arr.length-1; i++)
		{
				if(arr[i].replace(/\s+/g,"") != ""){
					codes.push('output.push('+JSON.stringify(arr[i])+');\n');
				}
				var _ms = ms[i].match(/\{\{\{\{EndSkin\.codeblock\[(\d+)\]\}\}\}\}/);
				codes.push(codeBlocks[parseInt(_ms[1])]+'\n');
			
		}
		codes.push('output.push('+JSON.stringify(arr.pop())+');\n');
		codes.push("return output.join('');");
		// check the converted code
//		console.log("codes:" + codes.join(''));

		try
		{
			return new Function(codes.join(''));
		}
		catch(e)
		{
			var err = [];
			if (cChooseBegins > cChooseEnds) err.push('missing '+ (cChooseBegins - cChooseEnds) +' {/choose}');
			if (cChooseBegins < cChooseEnds) err.push('too much {/choose}');
			if (foreachBegins > foreachEnds) err.push('missing '+ (foreachBegins - foreachEnds) +' {/foreach}');
			if (foreachBegins < foreachEnds) err.push('too much {/foreach}');
			if (cOthersBegins > cOthersEnds) err.push('missing' + (cOthersBegins - cOthersEnds) + '{/foreach}');
			if (cOthersBegins < cOthersEnds) err.push('too much {/foreach}');
			if (ifBegins > ifEnds) err.push('missing '+(ifBegins - ifEnds)+' {/if}');
			if (ifBegins < ifEnds) err.push('too much {/if}');
			var re = 'EndSkin Compile Error: \nview file:'+tmpId+'\n'+e.toString() + ';\n' + err.join(';\n');
			throw new Error(re);
			return re;
		}
	}
	
	this._replace_var_name_jsp = function(s)
	{
//		console.log("_replace_var_name_jsp:" + s);
		s = s.replace(/[a-z\_0-9\.]+/ig,function(s)
		{
			return 'this.show_val_jsp(\"' + s + '\")';
		});
		return s;
	}
	
	
	
	this.show_val_jsp = function(s)
	{
		var arr = s.split('.');
		var val = this.data;
		for(var i=0;i<arr.length;i++)
		{
			var key = arr[i];
			if (val[key] == undefined) return '';
			val = val[key];
		}
		if (typeof val == 'function') val = val();
		return val;
	}
	
	this._replace_var_name = function(s)
	{
		s = s.replace(/\$[a-z\_0-9\.]+/ig,function(s)
		{
			return 'this.show_val(\"' + s.replace('$','') + '\")';
		});
		return s;
	}
	
	
	
	this.show_val = function(s)
	{
		var arr = s.split('.');
		var val = this.data;
		for(var i=0;i<arr.length;i++)
		{
			var key = arr[i];
			if (val[key] == undefined) return '';
			val = val[key];
		}
		if (typeof val == 'function') val = val();
		return val;
	}
	
	var s = this.getTemplateString(tmpId);
//	console.log(s);
	if (!s) return;
	var cached_func = this.compile(s);
	
	this.html = function()
	{
		if (typeof cached_func == 'function')
			return cached_func.call(this);
		else
			return cached_func.toString();
	};
//	console.log(this.html());
	
	return this;
};



/*
* express 3.x support
*/
exports.renderFile = function(path, options, fn)
{
	var key = path + ':func';

	console.log(path);
	if('function' == typeof options) 
	{
		fn = options, options = {};
	}

	if (options.settings && options.settings.views)
	{
		RootPath = options.settings.views;
	}
	else
	{
		RootPath = path.replace(/\/[^\/]*$/,'/');
	}
	
	var viewsMatch = path.match(/(views.*?)\w/i);
	var tmpId = path.split(viewsMatch[1]).pop();
	try 
	{
		if (options.cache && exports.cache[key])
		{
			exports.cache[key].data = options;
			fn(null,exports.cache[key].html());
		}
		else
		{
			var func = new EndSkin(tmpId);
			exports.cache[key] = func;
			func.assign(options);
			fn(null,func.html());
		}
	}
	catch(err) 
	{
		fn(err);
	}
};


exports.__express = exports.renderFile;
